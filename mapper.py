import csv
from lxml.etree import *

# Sends [Nn]one to None
# I'm sure there's a better way
def tonone( s ):
    
    if s.lower() == 'none':
        return None

    return s

## Read CSV file of color code to CoQ object pairings
# 
# 'Color' format is irrelevant as long as the mapping 
# file knows. This also means that it doesn't need to 
# be colors, but can be any key.
#
# The CoQ object name, must be exactly as described 
# CoQ data.
#
# To create an empty cell then the mapping value 
# should be 'None'
#
#  'color' |  'image'
# ----------------------
#  '#000'  | 'DirtPath'
#
# Column headers are assumed to exist, but ignored. 
# The first column will always be the key and the 
# second always the CoQ object name.
def getmappings( mappingfile ):
    with open( mappingfile, newline = '' ) as f:

        next( f )
        rawmappings = list( csv.reader( f, delimiter = ',' ))
        
    mappings = {x[0]:tonone( x[1] ) for x in rawmappings}
    
    return mappings

## Main function
#
# imagefile = The FULL html file generated by 
#             exporting an image in GIMP to 
#             html format.
#
# mappingfile = The file containing all of the 
#               desired mappings.
#
# output = The desired output of the final 
#          RPM file.
def main( imagefile, mappingfile, output ):

    mappings = getmappings( mappingfile )

    parser = HTMLParser()
    tree = parse( imagefile, parser )
    data = tree.getroot().find( './/table' )

    # Assumed to be orriented like the CoQ 
    # map creater.
    #   length = x-axis
    #   width = y-axis
    w = len( data )
    l = len( data[0] )

    root = Element( 'Map', {
        'height': str( w ),
        'width': str( l )
    })
    root.text = '\n\t'

    for y in range( w ):

        for x in range( l ):
            
            celldata = data[y][x].attrib['bgcolor']

            cellement = SubElement( root, 'cell', 
                { 'X': str( x ), 'Y': str( y )}
            )
            cellement.tail = '\n\t'
            
            mapping = mappings.get( celldata )
            
            if mapping is not None:
                
                cellement.text = '\n\t\t'
                
                obj = SubElement( cellement, 'object', {'Name': mapping} )
                obj.tail = '\n\t'

    root[-1].tail = '\n'


    finaltree =  ElementTree( root )

    finaltree.write( output, encoding = 'utf-8', xml_declaration = True )

#    with open( output, 'w' ) as f:
#        f.write( tostring( root ).decode( 'utf-8' ))

main( 'test/fake_town.html', 'test/mappings.csv', 'test/Joppa.rpm' )
